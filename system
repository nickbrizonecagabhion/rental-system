package myproject;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.*;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.HashMap;
import java.util.Random;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.concurrent.TimeUnit;


class User {
    private String name;
    private String age;
    private String address;
    private String phone;
    private String gender;

    public User(String name, String age, String address, String phone, String gender) {
        this.name = name;
        this.age = age;
        this.address = address;
        this.phone = phone;
        this.gender = gender;
    }

    // Getters and Setters
    public String getName() { return name; }
    public void setName(String name) { this.name = name; }

    public String getAge() { return age; }
    public void setAge(String age) { this.age = age; }

    public String getAddress() { return address; }
    public void setAddress(String address) { this.address = address; }

    public String getPhone() { return phone; }
    public void setPhone(String phone) { this.phone = phone; }

    public String getGender() { return gender; }
    public void setGender(String gender) { this.gender = gender; }
}

public class RentalSystem {
    static HashMap<String, String> userAccountDatabase = new HashMap<>();

    // Save user data securely
    private static String hashPassword(String password) {
        try {
            MessageDigest md = MessageDigest.getInstance("SHA-256");
            byte[] hashedBytes = md.digest(password.getBytes());
            StringBuilder sb = new StringBuilder();
            for (byte b : hashedBytes) {
                sb.append(String.format("%02x", b));
            }
            return sb.toString();
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
            return null;
        }
    }

    // Save user data securely
    private static void saveUserData() {
        try (BufferedWriter writer = new BufferedWriter(new FileWriter("userData.txt"))) {
            for (String username : userAccountDatabase.keySet()) {
                writer.write(username + ":" + userAccountDatabase.get(username));
                writer.newLine();
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    // Load user data securely
    private static void loadUserData() {
        try (BufferedReader reader = new BufferedReader(new FileReader("userData.txt"))) {
            String line;
            while ((line = reader.readLine()) != null) {
                String[] userData = line.split(":");
                if (userData.length == 2) {
                    userAccountDatabase.put(userData[0], userData[1]);  // Load hashed password
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public static void main(String[] args) {
        // Load user data from file when starting
        loadUserData();
        openLoginForm();
    }

    private static void openLoginForm() {
        JFrame frame = new JFrame("Login");
        frame.getContentPane().setBackground(Color.BLACK);
        frame.setSize(463, 310);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.getContentPane().setLayout(null);
        
        JLabel titleLabel = new JLabel("VIDEO TAPE RENTAL MANAGEMENT SYSTEM", SwingConstants.CENTER);
        titleLabel.setForeground(Color.WHITE);
        titleLabel.setFont(new Font("Arial Black", Font.PLAIN, 15));
        titleLabel.setBounds(90, 50, 463, 30);
        frame.getContentPane().add(titleLabel);

        // Marquee effect for title
        Timer timer = new Timer(50, new ActionListener() { // Set speed to 50 milliseconds for faster scrolling
            int x = 463; // Start from the right side of the frame

            @Override
            public void actionPerformed(ActionEvent e) {
                titleLabel.setLocation(x, 28);
                x -= 6; // Move left faster (increase the decrement value for faster movement)
                if (x < -titleLabel.getWidth()) { // Reset position when it goes off screen
                    x = 463; // Reset to the right side
                }
            }
        });
        timer.start();
        JLabel usernameLabel = new JLabel("Username:");
        usernameLabel.setForeground(Color.WHITE);
        usernameLabel.setBounds(87, 91, 100, 25);
        frame.getContentPane().add(usernameLabel);

        JTextField usernameField = new JTextField();
        usernameField.setBounds(162, 91, 200, 25);
        frame.getContentPane().add(usernameField);

        JLabel passwordLabel = new JLabel("Password:");
        passwordLabel.setForeground(Color.WHITE);
        passwordLabel.setBounds(87, 126, 100, 25);
        frame.getContentPane().add(passwordLabel);

        JPasswordField passwordField = new JPasswordField();
        passwordField.setBounds(162, 126, 200, 25);
        frame.getContentPane().add(passwordField);

        JCheckBox showPasswordCheckBox = new JCheckBox("Show Password");
        showPasswordCheckBox.setBackground(Color.BLACK);
        showPasswordCheckBox.setForeground(Color.WHITE);
        showPasswordCheckBox.setBounds(181, 156, 129, 25);
        frame.getContentPane().add(showPasswordCheckBox);
        showPasswordCheckBox.addActionListener(e -> passwordField.setEchoChar(showPasswordCheckBox.isSelected() ? (char) 0 : 'â€¢'));

        JButton submitButton = new JButton("Submit");
        submitButton.setBounds(169, 187, 80, 30);
        frame.getContentPane().add(submitButton);

        JButton createAccountButton = new JButton("Sign Up");
        createAccountButton.setBounds(265, 187, 80, 30);
        frame.getContentPane().add(createAccountButton);

        submitButton.addActionListener(e -> {
            String username = usernameField.getText();
            String password = new String(passwordField.getPassword());
            String hashedPassword = hashPassword(password);  // Hash input password

            if (userAccountDatabase.containsKey(username) && userAccountDatabase.get(username).equals(hashedPassword)) {
                JOptionPane.showMessageDialog(frame, "Login successful!", "Success", JOptionPane.INFORMATION_MESSAGE);
                frame.dispose(); // Close the login frame
                openRentalFrame(); // Open the rental frame
            } else {
                JOptionPane.showMessageDialog(frame, "Invalid username or password.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        });

        createAccountButton.addActionListener(e -> {
            frame.dispose();
            openSignupForm();
        });

        frame.setLocationRelativeTo(null);
        frame.setVisible(true);
    }

    private static void openRentalFrame() {
        Rental rentalFrame = new Rental(); // Create an instance of the Rental class
        rentalFrame.setVisible(true); // Set the rental frame to be visible
    }

    private static void openSignupForm() {
        JFrame signupFrame = new JFrame("Create Account");
        signupFrame.setSize(400, 400);
        signupFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        signupFrame.getContentPane().setLayout(null);
        signupFrame.getContentPane().setBackground(Color.BLACK);

        JLabel idLabel = new JLabel("ID No:");
        idLabel.setForeground(Color.WHITE);
        idLabel.setBounds(50, 20, 100, 25);
        signupFrame.getContentPane().add(idLabel);

        JTextField idField = new JTextField();
        idField.setBounds(160, 20, 150, 25);
        idField.setEditable(false);
        signupFrame.getContentPane().add(idField);

        // Generate a random ID
        idField.setText(generateRandomId());

        JLabel nameLabel = new JLabel("Name:");
        nameLabel.setForeground(Color.WHITE);
        nameLabel.setBounds(50, 50, 100, 25);
        signupFrame.getContentPane().add(nameLabel);

        JTextField nameField = new JTextField();
        nameField.setBounds(160, 50, 150, 25);
        signupFrame.getContentPane().add(nameField);

        JLabel ageLabel = new JLabel("Age:");
        ageLabel.setForeground(Color.WHITE);
        ageLabel.setBounds(50, 80, 100, 25);
        signupFrame.getContentPane().add(ageLabel);

        JTextField ageField = new JTextField();
        ageField.setBounds(160, 80, 150, 25);
        signupFrame.getContentPane().add(ageField);

        // Add gender selection
        JLabel genderLabel = new JLabel("Gender:");
        genderLabel.setForeground(Color.WHITE);
        genderLabel.setBounds(50, 110, 100, 25);
        signupFrame.getContentPane().add(genderLabel);

        String[] genders = {"None", "Male", "Female"};
        JComboBox<String> genderComboBox = new JComboBox<>(genders);
        genderComboBox.setBounds(160, 110, 150, 25);
        signupFrame.getContentPane().add(genderComboBox);

        JLabel addressLabel = new JLabel("Address:");
        addressLabel.setForeground(Color.WHITE);
        addressLabel.setBounds(50, 140, 100, 25);
        signupFrame.getContentPane().add(addressLabel);

        JTextField addressField = new JTextField();
        addressField.setBounds(160, 140, 150, 25);
        signupFrame.getContentPane().add(addressField);

        JLabel phoneLabel = new JLabel("Phone No:");
        phoneLabel.setForeground(Color.WHITE);
        phoneLabel.setBounds(50, 170, 100, 25);
        signupFrame.getContentPane().add(phoneLabel);

        JTextField phoneField = new JTextField();
        phoneField.setBounds(160, 170, 150, 25);
        signupFrame.getContentPane().add(phoneField);

        JLabel usernameLabel = new JLabel("Username:");
        usernameLabel.setForeground(Color.WHITE);
        usernameLabel.setBounds(50, 200, 100, 25);
        signupFrame.getContentPane().add(usernameLabel);

        JTextField usernameField = new JTextField();
        usernameField.setBounds(160, 200, 150, 25);
        signupFrame.getContentPane().add(usernameField);

        JLabel passwordLabel = new JLabel("Password:");
        passwordLabel.setForeground(Color.WHITE);
        passwordLabel.setBounds(50, 230, 100, 25);
        signupFrame.getContentPane().add(passwordLabel);

        JPasswordField passwordField = new JPasswordField();
        passwordField.setBounds(160, 230, 150, 25);
        signupFrame.getContentPane().add(passwordField);

        JLabel verifyPasswordLabel = new JLabel("Verify Password:");
        verifyPasswordLabel.setForeground(Color.WHITE);
        verifyPasswordLabel.setBounds(50, 260, 100, 25);
        signupFrame.getContentPane().add(verifyPasswordLabel);

        JPasswordField verifyPasswordField = new JPasswordField();
        verifyPasswordField.setBounds(160, 260, 150, 25);
        signupFrame.getContentPane().add(verifyPasswordField);

        JCheckBox showPasswordCheckBox = new JCheckBox("Show Password");
        showPasswordCheckBox.setBounds(160, 290, 150, 25);
        showPasswordCheckBox.setBackground(Color.BLACK);
        showPasswordCheckBox.setForeground(Color.WHITE);
        signupFrame.getContentPane().add(showPasswordCheckBox);
        showPasswordCheckBox.addActionListener(e -> {
            passwordField.setEchoChar(showPasswordCheckBox.isSelected() ? (char) 0 : 'â€¢');
            verifyPasswordField.setEchoChar(showPasswordCheckBox.isSelected() ? (char) 0 : 'â€¢');
        });

        JButton createButton = new JButton("Create Account");
        createButton.setBounds(80, 320, 130, 30);
        signupFrame.getContentPane().add(createButton);

        JButton backButton = new JButton("Back");
        backButton.setBounds(220, 320, 80, 30);
        signupFrame.getContentPane().add(backButton);

        createButton.addActionListener(e -> {
            String newUsername = usernameField.getText();
            String newPassword = new String(passwordField.getPassword());
            String verifyPassword = new String(verifyPasswordField.getPassword());
            String selectedGender = (String) genderComboBox.getSelectedItem();

            if (newUsername.isEmpty() || newPassword.isEmpty() || verifyPassword.isEmpty()) {
                JOptionPane.showMessageDialog(signupFrame, "Fields cannot be empty!", "Error", JOptionPane.ERROR_MESSAGE);
            } else if (!newPassword.equals(verifyPassword)) {
                JOptionPane.showMessageDialog(signupFrame, "Passwords do not match!", "Error", JOptionPane.ERROR_MESSAGE);
            } else if (userAccountDatabase.containsKey(newUsername)) {
                JOptionPane.showMessageDialog(signupFrame, "Username already exists!", "Error", JOptionPane.ERROR_MESSAGE);
            } else if ("None".equals(selectedGender)) {
                JOptionPane.showMessageDialog(signupFrame, "Please select a valid gender!", "Error", JOptionPane.ERROR_MESSAGE);
            } else {
                // Hash the password before storing it
                String hashedPassword = hashPassword(newPassword);
                userAccountDatabase.put(newUsername, hashedPassword);
                saveUserData();
                JOptionPane.showMessageDialog(signupFrame, "Account created successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
                
                // Close the signup frame and open the login form
                signupFrame.dispose();
                openLoginForm(); // Return to the login form
            }
        });

        backButton.addActionListener(e -> {
            signupFrame.dispose();
            openLoginForm(); // Return to the login form
        });

        signupFrame.setLocationRelativeTo(null);
        signupFrame.setVisible(true);
    }

    // Load user data securely
    private static void loadUserData1() {
        try (BufferedReader reader = new BufferedReader(new FileReader("userData.txt"))) {
            String line;
            while ((line = reader.readLine()) != null) {
                String[] userData = line.split(":");
                if (userData.length == 2) {
                    userAccountDatabase.put(userData[0], userData[1]);  // Load hashed password
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    // Save user data securely
    private static void saveUserData1() {
        try (BufferedWriter writer = new BufferedWriter(new FileWriter("userData.txt"))) {
            for (String username : userAccountDatabase.keySet()) {
                writer.write(username + ":" + userAccountDatabase.get(username));
                writer.newLine();
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    // Hash user password
    private static String hashPassword1(String password) {
        try {
            MessageDigest md = MessageDigest.getInstance("SHA-256");
            byte[] hashedBytes = md.digest(password.getBytes());
            StringBuilder sb = new StringBuilder();
            for (byte b : hashedBytes) {
                sb.append(String.format("%02x", b));
            }
            return sb.toString();
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
            return null;
        }
    }

    private static String generateRandomId() {
        Random random = new Random();
        return String.valueOf(10000 + random.nextInt(90000)); // Generates a random ID between 10000 and 99999
    }
}

class Rental extends JFrame {
    private static final long serialVersionUID = 1L;
    private JPanel contentPane;
    private JTextField ids; // ID No
    private JTextField namesss; // Name
    private JTextField agess; // Age
    private JTextField dress; // Address
    private JTextField numbers; // Phone Number
    private JTextField dender; // Gender

    // HashMap to store user profiles
    private static HashMap<String, User> userDatabase;

    // Movie data
    private HashMap<String, String> movieDatabase; // Movie ID to Movie Name
    private HashMap<String, Integer> moviePrices; // Movie ID to Movie Price

    // Fields for renting movies
    private JTextField movieNameField;
    private JTextField moviePriceField;
    private JTextField cashGivenField;
    private JTextField changeField;
    private Date rentDate; // Date of rent
    private Date returnDate; // Date of return
    private int penalty; // Penalty for late return

    public Rental() {
        // Initialize the user database
        userDatabase = new HashMap<>();
        userDatabase.put("1", new User("John Doe", "30", "123 Main St", "1234567890", "Male"));
        userDatabase.put("2", new User("Jane Smith", "25", "456 Elm St", "0987654321", "Female"));

        // Initialize movie data
        movieDatabase = new HashMap<>();
        movieDatabase.put("1", "Jurassic World: The Fallen Kingdom");
        movieDatabase.put("2", "Train to Busan");
        movieDatabase.put("3", "Squid Game 2");
        movieDatabase.put("4", "The Good Dinosaur");
        movieDatabase.put("5", "Apocalypse Z");

        moviePrices = new HashMap<>();
        moviePrices.put("1", 250);
        moviePrices.put("2", 300);
        moviePrices.put("3", 250);
        moviePrices.put("4", 200);
        moviePrices.put("5", 250);

        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setBounds(100, 100, 899, 609);
        contentPane = new JPanel();
        contentPane.setBackground(new Color(255, 128, 0));
        setContentPane(contentPane);
        contentPane.setLayout(null);

        // Title Label with Marquee Effect
        JLabel titleLabel = new JLabel("WELCOME TO VIDEO RENTAL MANAGEMENT SYSTEM", SwingConstants.CENTER);
        titleLabel.setForeground(Color.WHITE);
        titleLabel.setFont(new Font("Arial Black", Font.BOLD, 20));
        titleLabel.setBounds(26, 10, 849, 30); // Initial position
        contentPane.add(titleLabel);

        // Marquee effect
        Timer timer = new Timer(30, new ActionListener() { // Set speed to 30 milliseconds for faster scrolling
            int x = 849; // Start from the right side of the frame

            @Override
            public void actionPerformed(ActionEvent e) {
                titleLabel.setLocation(x, 10);
                x -= 4; // Move left faster
                if (x < -titleLabel.getWidth()) { // Reset position when it goes off screen
                    x = 849;
                }
            }
        });
        timer.start();

        JTabbedPane tabbedPane = new JTabbedPane(JTabbedPane.TOP);
        tabbedPane.setBounds(26, 69, 849, 493);
        contentPane.add(tabbedPane);

        // Home Panel
        JPanel panel = new JPanel();
        panel.setBackground(new Color(0, 0, 0));
        tabbedPane.addTab("HOME", null, panel, null);
        panel.setLayout(null);

        // Movie Labels and Rent Buttons
        JLabel lblJurassicWorld = new JLabel("Jurassic World: The Fallen Kingdom    â‚±250");
        lblJurassicWorld.setForeground(Color.WHITE);
        lblJurassicWorld.setBounds(21, 20, 250, 20);
        panel.add(lblJurassicWorld);

        JButton btnRentJurassicWorld = new JButton("RENT");
        btnRentJurassicWorld.setBounds(300, 20, 80, 20);
        panel.add(btnRentJurassicWorld);

        JLabel lblTrainToBusan = new JLabel("Train to Busan    â‚±300");
        lblTrainToBusan.setForeground(Color.WHITE);
        lblTrainToBusan.setBounds(21, 60, 250, 20);
        panel.add(lblTrainToBusan);

        JButton btnRentTrainToBusan = new JButton("RENT");
        btnRentTrainToBusan.setBounds(300, 60, 80, 20);
        panel.add(btnRentTrainToBusan);

        JLabel lblSquidGame = new JLabel("Squid Game 2    â‚±250");
        lblSquidGame.setForeground(Color.WHITE);
        lblSquidGame.setBounds(21, 100, 250, 20);
        panel.add(lblSquidGame);

        JButton btnRentSquidGame = new JButton("RENT");
        btnRentSquidGame.setBounds(300, 100, 80, 20);
        panel.add(btnRentSquidGame);

        JLabel lblTheGoodDinosaur = new JLabel("The Good Dinosaur    â‚±200");
        lblTheGoodDinosaur.setForeground(Color.WHITE);
        lblTheGoodDinosaur.setBounds(21, 140, 250, 20);
        panel.add(lblTheGoodDinosaur);

        JButton btnRentTheGoodDinosaur = new JButton("RENT");
        btnRentTheGoodDinosaur.setBounds(300, 140, 80, 20);
        panel.add(btnRentTheGoodDinosaur);

        JLabel lblApocalypseZ = new JLabel("Apocalypse Z    â‚±250");
        lblApocalypseZ.setForeground(Color.WHITE);
        lblApocalypseZ.setBounds(21, 180, 250, 20);
        panel.add(lblApocalypseZ);

        JButton btnRentApocalypseZ = new JButton("RENT");
        btnRentApocalypseZ.setBounds(300, 180, 80, 20);
        panel.add(btnRentApocalypseZ);

        // Action listeners for RENT buttons
        btnRentJurassicWorld.addActionListener(e -> proceedToMovieRent("1"));
        btnRentTrainToBusan.addActionListener(e -> proceedToMovieRent("2"));
        btnRentSquidGame.addActionListener(e -> proceedToMovieRent("3"));
        btnRentTheGoodDinosaur.addActionListener(e -> proceedToMovieRent("4"));
        btnRentApocalypseZ.addActionListener(e -> proceedToMovieRent("5"));

        // Customer Profiling Panel
        JPanel customers = new JPanel();
        customers.setBackground(new Color(0, 0, 0));
        tabbedPane.addTab("CUSTOMER PROFFILING", null, customers, null);
        customers.setLayout(null);

        // Add components for customer profiling
        JLabel lblNewLabel_1 = new JLabel("ID NO:");
        lblNewLabel_1.setFont(new Font("Arial", Font.BOLD, 13));
        lblNewLabel_1.setForeground(new Color(255, 255, 255));
        lblNewLabel_1.setBounds(10, 31, 89, 28);
        customers.add(lblNewLabel_1);

        ids = new JTextField();
        ids.setBounds(63, 36, 132, 19);
        customers.add(ids);
        ids.setColumns(10);

        JLabel lblNewLabel_1_1 = new JLabel("NAME:");
        lblNewLabel_1_1.setForeground(Color.WHITE);
        lblNewLabel_1_1.setFont(new Font("Arial", Font.BOLD, 13));
        lblNewLabel_1_1.setBounds(10, 92, 89, 28);
        customers.add(lblNewLabel_1_1);

        namesss = new JTextField();
        namesss.setColumns(10);
        namesss.setBounds(63, 97, 186, 19);
        customers.add(namesss);

        JLabel agesss = new JLabel("AGE:");
        agesss.setForeground(Color.WHITE);
        agesss.setFont(new Font("Arial", Font.BOLD, 13));
        agesss.setBounds(10, 125, 89, 28);
        customers.add(agesss);

        agess = new JTextField();
        agess.setColumns(10);
        agess.setBounds(54, 130, 57, 19);
        customers.add(agess);

        JLabel lblNewLabel_1_3 = new JLabel("ADDRESS:");
        lblNewLabel_1_3.setForeground(Color.WHITE);
        lblNewLabel_1_3.setFont(new Font("Arial", Font.BOLD, 13));
        lblNewLabel_1_3.setBounds(10, 163, 89, 28);
        customers.add(lblNewLabel_1_3);

        dress = new JTextField();
        dress.setColumns(10);
        dress.setBounds(87, 168, 180, 19);
        customers.add(dress);
        
        JLabel lblNewLabel_1_4 = new JLabel("PHONE NUMBER:");
        lblNewLabel_1_4.setForeground(Color.WHITE);
        lblNewLabel_1_4.setFont(new Font("Arial", Font.BOLD, 13));
        lblNewLabel_1_4.setBounds(10, 201, 121, 28);
        customers.add(lblNewLabel_1_4);

        numbers = new JTextField();
        numbers.setColumns(10);
        numbers.setBounds(127, 206, 134, 19);
        customers.add(numbers);

        JLabel lblNewLabel_1_5 = new JLabel("GENDER:");
        lblNewLabel_1_5.setForeground(Color.WHITE);
        lblNewLabel_1_5.setFont(new Font("Arial", Font.BOLD, 13));
        lblNewLabel_1_5.setBounds(10, 239, 89, 28);
        customers.add(lblNewLabel_1_5);

        dender = new JTextField();
        dender.setColumns(10);
        dender.setBounds(87, 244, 74, 19);
        customers.add(dender);

        // Load button action
        JButton btnLoad = new JButton("LOAD");
        btnLoad.addActionListener(e -> {
            String idNo = ids.getText().trim();
            loadUserProfile(idNo);
        });
        btnLoad.setBounds(210, 50, 70, 19);
        customers.add(btnLoad);

        // Save button action
        JButton btnSave = new JButton("SAVE CHANGES");
        btnSave.addActionListener(e -> {
            String idNo = ids.getText().trim();
            String name = namesss.getText().trim();
            String age = agess.getText().trim();
            String address = dress.getText().trim();
            String phoneNo = numbers.getText().trim();
            String gender = dender.getText().trim();
            updateUserProfile(idNo, name, age, address, phoneNo, gender);
        });
        btnSave.setBounds(156, 282, 132, 21);
        customers.add(btnSave);

        // Movie Rent Panel
        JPanel rentPanel = new JPanel();
        rentPanel.setBackground(new Color(0, 0, 0));
        tabbedPane.addTab("MOVIE RENT", null, rentPanel, null);
        rentPanel.setLayout(null);

        // Movie Name Field
        JLabel lblMovieName = new JLabel("MOVIE NAME:");
        lblMovieName.setForeground(Color.WHITE);
        lblMovieName.setBounds(10, 20, 100, 20);
        rentPanel.add(lblMovieName);

        movieNameField = new JTextField();
        movieNameField.setBounds(120, 20, 200, 20);
        rentPanel.add(movieNameField);
        movieNameField.setColumns(10);

        // Movie Price Field
        JLabel lblMoviePrice = new JLabel("MOVIE PRICE:");
        lblMoviePrice.setForeground(Color.WHITE);
        lblMoviePrice.setBounds(10, 60, 100, 20);
        rentPanel.add(lblMoviePrice);

        moviePriceField = new JTextField();
        moviePriceField.setBounds(120, 60, 200, 20);
        rentPanel.add(moviePriceField);
        moviePriceField.setColumns(10);

        // Cash Given Field
        JLabel lblCashGiven = new JLabel("CASH GIVEN:");
        lblCashGiven.setForeground(Color.WHITE);
        lblCashGiven.setBounds(10, 100, 100, 20);
        rentPanel.add(lblCashGiven);

        cashGivenField = new JTextField();
        cashGivenField.setBounds(120, 100, 200, 20);
        rentPanel.add(cashGivenField);
        cashGivenField.setColumns(10);

        // Change Field
        JLabel lblChange = new JLabel("CHANGE:");
        lblChange.setForeground(Color.WHITE);
        lblChange.setBounds(10, 140, 100, 20);
        rentPanel.add(lblChange);

        changeField = new JTextField();
        changeField.setBounds(120, 140, 200, 20);
        rentPanel.add(changeField);
        changeField.setColumns(10);
        changeField.setEditable(false); // Make change field read-only

        // Rent Button
        JButton btnCalculateChange = new JButton("CALCULATE CHANGE");
        btnCalculateChange.setBounds(120, 180, 200, 30);
        rentPanel.add(btnCalculateChange);

        // Action listener for calculating change
        btnCalculateChange.addActionListener(e -> {
            try {
                int moviePrice = Integer.parseInt(moviePriceField.getText().replace("â‚±", "").trim());
                int cashGiven = Integer.parseInt(cashGivenField.getText().trim());
                int change = cashGiven - moviePrice;
                if (change < 0) {
                    JOptionPane.showMessageDialog(rentPanel, "Insufficient cash given!", "Error", JOptionPane.ERROR_MESSAGE);
                } else {
                    changeField.setText("â‚±" + change);
                }
            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(rentPanel, "Please enter valid numbers!", "Error", JOptionPane.ERROR_MESSAGE);
            }
        });

        // Return Panel
        JPanel returnPanel = new JPanel();
        returnPanel.setBackground(new Color(0, 0, 0));
        tabbedPane.addTab("RETURN MOVIE", null, returnPanel, null);
        returnPanel.setLayout(null);

        JLabel lblReturnMovieId = new JLabel("MOVIE ID:");
        lblReturnMovieId.setForeground(Color.WHITE);
        lblReturnMovieId.setBounds(10, 20, 100, 20);
        returnPanel.add(lblReturnMovieId);

        JTextField returnMovieIdField = new JTextField();
        returnMovieIdField.setBounds(120, 20, 200, 20);
        returnPanel.add(returnMovieIdField);
        returnMovieIdField.setColumns(10);

        JButton btnReturnMovie = new JButton("RETURN MOVIE");
        btnReturnMovie.setBounds(120, 60, 200, 30);
        returnPanel.add(btnReturnMovie);

        btnReturnMovie.addActionListener(e -> {
            String movieId = returnMovieIdField.getText().trim();
            // Implement return logic here
            if (movieDatabase.containsKey(movieId)) {
                // Logic to handle the return of the movie
                JOptionPane.showMessageDialog(returnPanel, "Movie returned successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
                returnMovieIdField.setText(""); // Clear the input field
            } else {
                JOptionPane.showMessageDialog(returnPanel, "Movie ID not found.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        });
    }

    private void proceedToMovieRent(String movieId) {
        String movieName = movieDatabase.get(movieId);
        Integer moviePrice = moviePrices.get(movieId);
        
        if (movieName != null && moviePrice != null) {
            movieNameField.setText(movieName);
            moviePriceField.setText("â‚±" + moviePrice);
            rentDate = new Date(); // Set the rent date to the current date
            JTabbedPane tabbedPane = (JTabbedPane) contentPane.getComponent(0);
            tabbedPane.setSelectedIndex(2); // Switch to the MOVIE RENT tab
        } else {
            JOptionPane.showMessageDialog(this, "Movie not found.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void returnMovie(String movieId) {
        // Logic to handle the return of the movie
        returnDate = new Date(); // Set the return date to the current date
        long diffInMillies = returnDate.getTime() - rentDate.getTime();
        long diffInDays = TimeUnit.DAYS.convert(diffInMillies, TimeUnit.MILLISECONDS);

        // Assuming a penalty of â‚±50 per day for late returns
        if (diffInDays > 3) { // Assuming 3 days is the rental period
            penalty = (int) (diffInDays - 3) * 50; // Calculate penalty
        } else {
            penalty = 0; // No penalty
        }

        // Show the penalty and return date
        JOptionPane.showMessageDialog(this, "Movie returned successfully!\n" +
                "Date of Rent: " + new SimpleDateFormat("yyyy-MM-dd").format(rentDate) + "\n" +
                "Date of Return: " + new SimpleDateFormat("yyyy-MM-dd").format(returnDate) + "\n" +
                "Penalty: â‚±" + penalty, "Success", JOptionPane.INFORMATION_MESSAGE);
    }

    private void loadUserProfile(String id) {
        User user = userDatabase.get(id);
        if (user != null) {
            namesss.setText(user.getName());
            agess.setText(user.getAge());
            dress.setText(user.getAddress());
            numbers.setText(user.getPhone());
            dender.setText(user.getGender());
        } else {
            JOptionPane.showMessageDialog(null, "User   not found.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    protected void updateUserProfile(String id, String name, String age, String address, String phoneNo, String gender) {
        User user = userDatabase.get(id);
        if (user != null) {
            user.setName(name);
            user.setAge(age);
            user.setAddress(address);
            user.setPhone(phoneNo);
            user.setGender(gender);
            JOptionPane.showMessageDialog(null, "User   profile updated successfully.", "Success", JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(null, "User   not found.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
}
